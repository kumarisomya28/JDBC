Q1). This code is for establishing connection with MySQL database and retrieving data from db Java Database connectivity.
import java.sql.*;

public class Main {
    private static final String url = "jdbc:mysql://localhost:3306/mydb";
    private static final String username="root";
    private static final String password= "9608";
    public static void main(String[] args) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e.getMessage());
        }

        try{
            Connection connection = DriverManager.getConnection(url,username,password);
            Statement statement = connection.createStatement();
           String query =" select * from students";
           ResultSet resultSet = statement.executeQuery(query);
           while(resultSet.next()){
               int id = resultSet.getInt("id");
               String name = resultSet.getString("name");
               int age = resultSet.getInt("age");
               double marks = resultSet.getDouble("marks");
               System.out.println("ID:"+id);
               System.out.println("NAME:"+name);
               System.out.println("AGE:"+age);
               System.out.println("MARKS:"+marks);
           }
        }catch (SQLException e){
            System.out.println(e.getMessage());
        }

    }
}

Q2). CRUD operation using create statement.
package org.example;
import java.sql.*;

public class Main {
    private static final String url = "jdbc:mysql://localhost:3306/mydb";
    private static final String username="root";
    private static final String password= "9608";
    public static void main(String[] args) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e.getMessage());
        }

        try{
            Connection connection = DriverManager.getConnection(url,username,password);
            Statement statement = connection.createStatement();
//           String query =" select * from students";//select query
//            String query = String.format("INSERT INTO students(name,age,marks) VALUES('%s', %d, %f)","Rahul",22,76.4); // Insert query
//              String query = String .format("UPDATE students SET marks = %f WHERE id = %d",84.5,2); //update query
            String query = "DELETE FROM students WHERE ID = 2"; // delete query
           int rowsAffected= statement.executeUpdate(query);
          if(rowsAffected > 0 ){
              System.out.println("Deleted Successfully!");
          } else{
              System.out.println("Not Deleted!");
          }
        }catch (SQLException e){
            System.out.println(e.getMessage());
        }

    }
}

Q3).  CRUD operation using prepared statement.
package org.example;
import java.sql.*;

public class Main {
    private static final String url = "jdbc:mysql://localhost:3306/mydb";
    private static final String username="root";
    private static final String password= "9608";
    public static void main(String[] args) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e.getMessage());
        }

        try{
            Connection connection = DriverManager.getConnection(url,username,password);
////            String query = "INSERT INTO students(name, age, marks) VALUES(?, ?, ?)"; // insert statement
//            String query = "SELECT marks FROM students WHERE id = ?"; // retrieve statement
//            String query = "UPDATE students SET marks = ? WHERE id = ?"; //update statement
            String query = "DELETE FROM students WHERE id = ?";  //delete statement
            PreparedStatement preparedStatement = connection.prepareStatement(query);
//            preparedStatement.setDouble(1,87.5);
            preparedStatement.setInt(1,3);


//            preparedStatement.setInt(1,1);  //retrieve statement

//            preparedStatement.setString(1,"Somya");//insert statement
//            preparedStatement.setInt(2, 25);
//            preparedStatement.setDouble(3,86.7);

           int rowsAffected= preparedStatement.executeUpdate();
          if(rowsAffected > 0 ){
              System.out.println("Data Updated Successfully!");
          } else{
              System.out.println("Data Not updated!");
          }


//            ResultSet resultSet = preparedStatement.executeQuery();
//            if(resultSet.next()){
//                double marks = resultSet.getDouble("marks");
//                System.out.println("Marks:"+ marks);
//            }else {
//                System.out.println("Markks not found!");//RETRIVAL statement
//            }
        }catch (SQLException e){
            System.out.println(e.getMessage());
        }

    }
}

Q4) Batch processing using create statement.
package org.example;
import java.sql.*;
import java.util.Scanner;

public class Main {
    private static final String url = "jdbc:mysql://localhost:3306/mydb";
    private static final String username="root";
    private static final String password= "9608";
    public static void main(String[] args) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e.getMessage());
        }

        try{
            Connection connection = DriverManager.getConnection(url,username,password);
            Statement statement = connection.createStatement();
            Scanner sc = new Scanner(System.in);
            while(true){
                System.out.println("Enter name: ");
                String name = sc.next();
                System.out.println("Enter age: ");
                int age = sc.nextInt();
                System.out.println("Enter marks: ");
                double marks = sc.nextDouble();
                System.out.print("Enter more data(Y/N): ");
                String choice = sc.next();
                String query = String.format("INSERT INTO students(name, age, marks) VALUES('%s', %d, %f)", name, age, marks);

                statement.addBatch(query);
                if(choice.toUpperCase().equals("N")){
                    break;
                }

            }
            int[] arr = statement.executeBatch();
            for(int i = 0; i< arr.length; i++){
                if(arr[i] == 0){
                    System.out.println("Query: "+ i +" Not executed successfully!!");
                }
            }
            
        }catch (SQLException e){
            System.out.println(e.getMessage());
        }

    }
}

Q5).Batch processing using prepared statement.
package org.example;

import java.sql.*;
import java.util.Scanner;

public class Main {
    private static final String url = "jdbc:mysql://localhost:3306/mydb";
    private static final String username = "root";
    private static final String password = "9608";

    public static void main(String[] args) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e.getMessage());
        }

        try {
            Connection connection = DriverManager.getConnection(url, username, password);
            String query = "INSERT INTO students(name, age, marks) VALUES( ?, ?, ?)";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            Scanner sc = new Scanner(System.in);
            while (true) {
                System.out.println("Enter name: ");
                String name = sc.next();
                System.out.println("Enter age: ");
                int age = sc.nextInt();
                System.out.println("Enter marks: ");
                double marks = sc.nextDouble();
                System.out.print("Enter more data(Y/N): ");
                String choice = sc.next();
                preparedStatement.setString(1,name);
                preparedStatement.setInt(2,age);
                preparedStatement.setDouble(3,marks);
                preparedStatement.addBatch();
                if (choice.toUpperCase().equals("N")) {
                    break;
                }

            }
            int[] arr = preparedStatement.executeBatch();
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] == 0) {
                    System.out.println("Query: " + i + " Not executed successfully!!");
                }
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

    }
}

Q6). Callable Statement:----
// Java Program illustrating Callable Statement in JDBC

// Step 1: Importing DB(SQL) classes
import java.sql.*;

// Main class
class GFG {

    // Main driver method
    public static void main(String[] args)
    {
        // Try block to check if any exceptions occurs
        try {

            // Step 2: Establish a connection

            // Step 3: Loading and registering drivers

            // Loading driver using forName() method
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Registering driver using DriverManager
            Connection con = DriverManager.getConnection(
                "jdbc:mysql:///world", "root", "12345");

            // Step 4: Create a statement
            Statement s = con.createStatement();

            // Step 5: Execute the query
            // select * from people

            CallableStatement cs
                = con.prepareCall("{call peopleinfo(?,?)}");
            cs.setString(1, "Bob");
            cs.setInt(2, 64);
            cs.execute();
            ResultSet result
                = s.executeQuery("select * from people");

            // Step 6: Process the results

            // Condition check using next() method
            // to check for element
            while (result.next()) {

                // Print and display elements (Name and Age)
                System.out.println("Name : "
                                   + result.getString(1));
                System.out.println("Age : "
                                   + result.getInt(2));
            }
        }

        // Catch statement for DB exceptions
        catch (SQLException e) {

            // Print the exception
            System.out.println(e);
        }

        // Catch block for generic class exceptions
        catch (ClassNotFoundException e) {

            // Print the line number where exception occurred
            e.printStackTrace();
        }
    }
}

